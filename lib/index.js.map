{"version":3,"sources":["../src/index.js"],"names":["module","exports","disposable","bookMap","noteMap","writeNote","path","title","body","fs","mkdir","recursive","err","writeFile","console","log","getMapsAndWriteAllNotes","plainTextPath","allNotes","notes","all","Promise","resolve","reject","docs","map","doc","_id","bookData","books","get","bookId","name","writeMaps","maps","JSON","stringify","activate","inkdrop","isMobile","backupPath","config","core","db","main","dataStore","getLocalDB","onChange","change","typeOfChange","id","split","bookPath","warn","deactivate","dispose"],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\n\nmodule.exports = {\n    disposable: null,\n    bookMap: {},\n    noteMap: {},\n    writeNote(path, title, body) {\n        fs.mkdir(path, { recursive: true }, (err) => {\n            if (err) {\n                throw err;\n            }\n            fs.writeFile(`${path}/${title}.md`, body, (err) => {\n                if (err) {\n                    return console.log(err);\n                }\n            });\n        });\n    },\n    async getMapsAndWriteAllNotes(plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await this.disposable.notes.all();\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    this.noteMap[doc._id] = doc.title;\n                    const bookData = await this.disposable.books.get(\n                        doc.bookId\n                    );\n                    this.bookMap[doc.bookId] = bookData.name;\n\n                    this.writeNote(\n                        `${plainTextPath}/${bookData.name}`,\n                        doc.title,\n                        doc.body\n                    );\n                })\n            );\n\n            resolve([this.bookMap, this.noteMap]);\n        });\n    },\n    writeMaps(plainTextPath, maps) {\n        fs.mkdir(plainTextPath, { recursive: true }, (err) => {\n            if (err) {\n                throw err;\n            }\n            fs.writeFile(\n                `${plainTextPath}/.__DATA_MAP__.json`,\n                JSON.stringify(maps),\n                (err) => {\n                    if (err) {\n                        return console.log(err);\n                    }\n                }\n            );\n        });\n    },\n    async activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = inkdrop.config.get().core.db.backupPath;\n            if (backupPath) {\n                const plainTextPath = `${backupPath}/PLAIN_TEXT`;\n                this.disposable = inkdrop.main.dataStore.getLocalDB();\n                const maps = await this.getMapsAndWriteAllNotes(plainTextPath);\n                this.writeMaps(plainTextPath, maps);\n                // Sync stuff on changes:\n                this.disposable.onChange((change) => {\n                    try {\n                        const typeOfChange = change.id.split(\":\")[0];\n\n                        switch (typeOfChange) {\n                            case \"note\":\n                                const bookPath = `${plainTextPath}/${\n                                    this.bookMap[change.doc.bookId]\n                                }`;\n                                this.writeNote(\n                                    bookPath,\n                                    change.doc.title,\n                                    change.doc.body\n                                );\n\n                                break;\n                            // case \"book\":\n                            //     fs.rename(\"/tmp/hello\", \"/tmp/world\", (err) => {\n                            //         if (err) throw err;\n                            //         console.log(\"renamed complete\");\n                            //     });\n                            //     break;\n                        }\n                    } catch (err) {\n                        console.warn(\"Plain text backup failed:\", err);\n                    }\n                });\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (this.disposable) {\n                this.disposable.dispose();\n            }\n        }\n    },\n};\n"],"file":"index.js"}