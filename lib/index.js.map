{"version":3,"sources":["../src/index.js"],"names":["module","exports","disposable","dataMap","books","notes","getDataMapPath","plainTextPath","writeNote","path","title","body","fs","mkdir","recursive","writeFile","getDataAndWriteAllNotes","allNotes","all","Promise","resolve","reject","docs","map","doc","_id","bookData","get","bookId","name","writeMaps","maps","JSON","stringify","activate","inkdrop","isMobile","backupPath","config","core","db","main","dataStore","getLocalDB","onChange","change","typeOfChange","id","split","bookPath","oldDataMap","parse","readFile","rename","err","console","warn","deactivate","dispose"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\n\nmodule.exports = {\n    disposable: null,\n    dataMap: { books: {}, notes: {} },\n    getDataMapPath: (plainTextPath) => {\n        return `${plainTextPath}/.__DATA_MAP__.json`;\n    },\n    async writeNote(path, title, body) {\n        await fs.mkdir(path, { recursive: true });\n        await fs.writeFile(`${path}/${title}.md`, body);\n    },\n    async getDataAndWriteAllNotes(plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await this.disposable.notes.all();\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    this.dataMap.notes[doc._id] = doc.title;\n                    const bookData = await this.disposable.books.get(\n                        doc.bookId\n                    );\n                    this.dataMap.books[doc.bookId] = bookData.name;\n\n                    await this.writeNote(\n                        `${plainTextPath}/${bookData.name}`,\n                        doc.title,\n                        doc.body\n                    );\n                })\n            );\n\n            resolve(this.dataMap);\n        });\n    },\n    async writeMaps(plainTextPath, maps) {\n        await fs.mkdir(plainTextPath, { recursive: true });\n\n        await fs.writeFile(\n            this.getDataMapPath(plainTextPath),\n            JSON.stringify(maps)\n        );\n    },\n    async activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = inkdrop.config.get().core.db.backupPath;\n            if (backupPath) {\n                const plainTextPath = `${backupPath}/PLAIN_TEXT`;\n                this.disposable = inkdrop.main.dataStore.getLocalDB();\n                await this.getDataAndWriteAllNotes(plainTextPath);\n                await this.writeMaps(plainTextPath, this.dataMap);\n                // Sync stuff on changes:\n                this.disposable.onChange(async (change) => {\n                    try {\n                        const typeOfChange = change.id.split(\":\")[0];\n\n                        switch (typeOfChange) {\n                            case \"note\":\n                                const bookPath = `${plainTextPath}/${\n                                    this.dataMap.books[change.doc.bookId]\n                                }`;\n\n                                // If the title has changed, rename the old note.\n                                if (\n                                    change.doc.title !==\n                                    this.dataMap.notes[change.id]\n                                ) {\n                                    const oldDataMap = JSON.parse(\n                                        await fs.readFile(\n                                            this.getDataMapPath(plainTextPath),\n                                            \"utf8\"\n                                        )\n                                    );\n\n                                    await fs.rename(\n                                        `${bookPath}/${\n                                            oldDataMap.notes[change.id]\n                                        }.md`,\n                                        `${bookPath}/${change.doc.title}.md`\n                                    );\n                                    this.dataMap.notes[change.id] =\n                                        change.doc.title;\n                                }\n                                await this.writeNote(\n                                    bookPath,\n                                    change.doc.title,\n                                    change.doc.body\n                                );\n                                await this.writeMaps(\n                                    plainTextPath,\n                                    this.dataMap\n                                );\n\n                                break;\n                            case \"book\":\n                                if (\n                                    change.doc.name !==\n                                    this.dataMap.books[change.id]\n                                ) {\n                                    const oldDataMap = JSON.parse(\n                                        await fs.readFile(\n                                            this.getDataMapPath(plainTextPath),\n                                            \"utf8\"\n                                        )\n                                    );\n                                    debugger;\n\n                                    await fs.rename(\n                                        `${plainTextPath}/${\n                                            oldDataMap.books[change.id]\n                                        }`,\n                                        `${plainTextPath}/${change.doc.name}`\n                                    );\n\n                                    this.dataMap.books[change.id] =\n                                        change.doc.name;\n                                    debugger;\n                                    await this.writeMaps(\n                                        plainTextPath,\n                                        this.dataMap\n                                    );\n                                }\n                                break;\n                        }\n                    } catch (err) {\n                        console.warn(\n                            \"Plain text backup may have had an issue:\",\n                            err\n                        );\n                    }\n                });\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (this.disposable) {\n                this.disposable.dispose();\n            }\n        }\n    },\n};\n"],"file":"index.js"}