{"version":3,"sources":["../src/index.js"],"names":["self","module","exports","localDb","activate","inkdrop","isMobile","backupPath","utilities","getBackupPath","plainTextPath","getPlainTextPath","main","dataStore","getLocalDB","getDataAndWriteAllNotes","writeMaps","dataMap","components","registerClass","ImportSidebar","layouts","insertComponentToLayoutAfter","layoutName","name","ImportModal","addComponentToLayout","onChange","change","typeOfChange","id","split","bookPath","books","doc","bookId","notes","title","oldDataMap","getDataMap","fs","rename","path","writeNote","body","basename","getBookPath","err","console","warn","onChangeErr","deactivate","dispose","deleteClass","removeComponentFromLayout"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport ImportSidebar from \"./import_sidebar\";\nimport ImportModal from \"./import_modal\";\nimport utilities from \"./utilities\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    localDb: null,\n    async activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = utilities.getBackupPath();\n            if (backupPath) {\n                const plainTextPath = utilities.getPlainTextPath(backupPath);\n                self.localDb =\n                    self.localDb || inkdrop.main.dataStore.getLocalDB();\n                await utilities.getDataAndWriteAllNotes(\n                    self.localDb,\n                    plainTextPath\n                );\n                await utilities.writeMaps(plainTextPath, utilities.dataMap);\n\n                inkdrop.components.registerClass(ImportSidebar);\n                inkdrop.layouts.insertComponentToLayoutAfter(\n                    ImportSidebar.layoutName,\n                    \"SideBarMenuItemTrash\",\n                    ImportSidebar.name\n                );\n\n                inkdrop.components.registerClass(ImportModal);\n                inkdrop.layouts.addComponentToLayout(\n                    ImportModal.layoutName,\n                    ImportModal.name\n                );\n                try {\n                    // Sync stuff on changes:\n                    self.localDb.onChange(async (change) => {\n                        try {\n                            const typeOfChange = change.id.split(\":\")[0];\n\n                            switch (typeOfChange) {\n                                case \"note\":\n                                    const bookPath = `${plainTextPath}/${\n                                        utilities.dataMap.books[\n                                            change.doc.bookId\n                                        ]\n                                    }`;\n                                    if (!utilities.dataMap.notes[change.id]) {\n                                        utilities.dataMap.notes[change.id] = {};\n                                    }\n                                    // If the title has changed, rename the old note.\n                                    if (change?.doc?.title) {\n                                        if (\n                                            utilities.dataMap.notes[change.id]\n                                                ?.title &&\n                                            change.doc.title !==\n                                                utilities.dataMap.notes[\n                                                    change.id\n                                                ].title\n                                        ) {\n                                            const oldDataMap = await utilities.getDataMap(\n                                                plainTextPath\n                                            );\n\n                                            await fs.rename(\n                                                `${bookPath}/${\n                                                    oldDataMap.notes[change.id]\n                                                        .title\n                                                }.md`,\n                                                `${bookPath}/${change.doc.title}.md`\n                                            );\n                                        }\n\n                                        utilities.dataMap.notes[\n                                            change.id\n                                        ].title = change.doc.title;\n                                        utilities.dataMap.notes[\n                                            change.id\n                                        ].path = `${\n                                            utilities.dataMap.books[\n                                                change.doc.bookId\n                                            ]\n                                        }/${change.doc.title}.md`;\n\n                                        await utilities.writeNote(\n                                            `${plainTextPath}/${\n                                                utilities.dataMap.notes[\n                                                    change.id\n                                                ].path\n                                            }`,\n                                            change.doc.body\n                                        );\n                                        await utilities.writeMaps(\n                                            plainTextPath,\n                                            utilities.dataMap\n                                        );\n                                    }\n\n                                    break;\n                                case \"book\":\n                                    if (\n                                        utilities?.dataMap?.books[change.id] &&\n                                        change?.doc?.name &&\n                                        change.doc.name !==\n                                            path.basename(\n                                                utilities.dataMap.books[\n                                                    change.id\n                                                ]\n                                            )\n                                    ) {\n                                        const oldDataMap = await utilities.getDataMap(\n                                            plainTextPath\n                                        );\n\n                                        await fs.rename(\n                                            `${plainTextPath}/${\n                                                oldDataMap.books[change.id]\n                                            }`,\n                                            `${plainTextPath}/${change.doc.name}`\n                                        );\n\n                                        let bookPath = await utilities.getBookPath(\n                                            self.localDb,\n                                            change.doc\n                                        );\n\n                                        utilities.dataMap.books[\n                                            change.id\n                                        ] = bookPath;\n\n                                        await utilities.writeMaps(\n                                            plainTextPath,\n                                            utilities.dataMap\n                                        );\n                                    }\n                                    break;\n                            }\n                        } catch (err) {\n                            console.warn(\n                                \"Plain text backup may have had an issue:\",\n                                err\n                            );\n                        }\n                    });\n                } catch (onChangeErr) {\n                    console.warn(\"onChange event threw an error:\", onChangeErr);\n                }\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (self.localDb) {\n                self.localDb.dispose();\n            }\n\n            inkdrop.components.deleteClass(ImportSidebar);\n            inkdrop.layouts.removeComponentFromLayout(\n                ImportSidebar.layoutName,\n                ImportSidebar.name\n            );\n\n            inkdrop.components.deleteClass(ImportModal);\n            layouts.removeComponentFromLayout(\"modal\", ImportModal.name);\n        }\n    },\n});\n"],"file":"index.js"}