{"version":3,"sources":["../src/index.js"],"names":["module","exports","disposable","activate","inkdrop","isMobile","backupPath","utilities","getBackupPath","plainTextPath","getPlainTextPath","main","dataStore","getLocalDB","getDataAndWriteAllNotes","writeMaps","dataMap","components","registerClass","ImportSidebar","layouts","insertComponentToLayoutAfter","layoutName","name","ImportModal","addComponentToLayout","onChange","change","typeOfChange","id","split","bookPath","books","doc","bookId","notes","title","oldDataMap","getDataMap","fs","rename","path","writeNote","body","basename","getBookPath","err","console","warn","deactivate","dispose","deleteClass","removeComponentFromLayout"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport ImportSidebar from \"./import_sidebar\";\nimport ImportModal from \"./import_modal\";\nimport utilities from \"./utilities\";\nimport * as path from \"path\";\n\nmodule.exports = {\n    disposable: null,\n    async activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = utilities.getBackupPath();\n            if (backupPath) {\n                const plainTextPath = utilities.getPlainTextPath(backupPath);\n                this.disposable = inkdrop.main.dataStore.getLocalDB();\n                await utilities.getDataAndWriteAllNotes(\n                    this.disposable,\n                    plainTextPath\n                );\n                await utilities.writeMaps(plainTextPath, utilities.dataMap);\n\n                inkdrop.components.registerClass(ImportSidebar);\n                inkdrop.layouts.insertComponentToLayoutAfter(\n                    ImportSidebar.layoutName,\n                    \"SideBarMenuItemTrash\",\n                    ImportSidebar.name\n                );\n\n                inkdrop.components.registerClass(ImportModal);\n                inkdrop.layouts.addComponentToLayout(\n                    ImportModal.layoutName,\n                    ImportModal.name\n                );\n\n                // Sync stuff on changes:\n                this.disposable.onChange(async (change) => {\n                    try {\n                        const typeOfChange = change.id.split(\":\")[0];\n\n                        switch (typeOfChange) {\n                            case \"note\":\n                                const bookPath = `${plainTextPath}/${\n                                    utilities.dataMap.books[change.doc.bookId]\n                                }`;\n                                if (!utilities.dataMap.notes[change.id]) {\n                                    utilities.dataMap.notes[change.id] = {};\n                                }\n                                // If the title has changed, rename the old note.\n                                if (\n                                    change?.doc?.title &&\n                                    utilities.dataMap.notes[change.id]?.title &&\n                                    change.doc.title !==\n                                        utilities.dataMap.notes[change.id].title\n                                ) {\n                                    const oldDataMap = await utilities.getDataMap(\n                                        plainTextPath\n                                    );\n\n                                    await fs.rename(\n                                        `${bookPath}/${\n                                            oldDataMap.notes[change.id].title\n                                        }.md`,\n                                        `${bookPath}/${change.doc.title}.md`\n                                    );\n                                }\n\n                                utilities.dataMap.notes[change.id].title =\n                                    change.doc.title;\n                                utilities.dataMap.notes[change.id].path = `${\n                                    utilities.dataMap.books[change.doc.bookId]\n                                }/${change.doc.title}.md`;\n\n                                await utilities.writeNote(\n                                    `${plainTextPath}/${\n                                        utilities.dataMap.notes[change.id].path\n                                    }`,\n                                    change.doc.body\n                                );\n                                await utilities.writeMaps(\n                                    plainTextPath,\n                                    utilities.dataMap\n                                );\n\n                                break;\n                            case \"book\":\n                                if (\n                                    utilities?.dataMap?.books[change.id] &&\n                                    change?.doc?.name &&\n                                    change.doc.name !==\n                                        path.basename(\n                                            utilities.dataMap.books[change.id]\n                                        )\n                                ) {\n                                    const oldDataMap = await utilities.getDataMap(\n                                        plainTextPath\n                                    );\n\n                                    await fs.rename(\n                                        `${plainTextPath}/${\n                                            oldDataMap.books[change.id]\n                                        }`,\n                                        `${plainTextPath}/${change.doc.name}`\n                                    );\n\n                                    let bookPath = await utilities.getBookPath(\n                                        this.disposable,\n                                        change.doc\n                                    );\n\n                                    utilities.dataMap.books[\n                                        change.id\n                                    ] = bookPath;\n\n                                    await utilities.writeMaps(\n                                        plainTextPath,\n                                        utilities.dataMap\n                                    );\n                                }\n                                break;\n                        }\n                    } catch (err) {\n                        console.warn(\n                            \"Plain text backup may have had an issue:\",\n                            err\n                        );\n                    }\n                });\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (this.disposable) {\n                this.disposable.dispose();\n            }\n\n            inkdrop.components.deleteClass(ImportSidebar);\n            inkdrop.layouts.removeComponentFromLayout(\n                ImportSidebar.layoutName,\n                ImportSidebar.name\n            );\n\n            inkdrop.components.deleteClass(ImportModal);\n            layouts.removeComponentFromLayout(\"modal\", ImportModal.name);\n        }\n    },\n};\n"],"file":"index.js"}