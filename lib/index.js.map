{"version":3,"sources":["../src/index.js"],"names":["module","exports","disposable","activate","inkdrop","isMobile","backupPath","utilities","getBackupPath","plainTextPath","getPlainTextPath","main","dataStore","getLocalDB","getDataAndWriteAllNotes","writeMaps","dataMap","components","registerClass","ImportSidebar","layouts","insertComponentToLayoutAfter","layoutName","name","ImportModal","addComponentToLayout","onChange","change","typeOfChange","id","split","bookPath","books","doc","bookId","notes","title","oldDataMap","getDataMap","fs","rename","path","writeNote","body","err","console","warn","deactivate","dispose","deleteClass","removeComponentFromLayout"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport ImportSidebar from \"./import_sidebar\";\nimport ImportModal from \"./import_modal\";\nimport utilities from \"./utilities\";\n\nmodule.exports = {\n    disposable: null,\n    async activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = utilities.getBackupPath();\n            if (backupPath) {\n                const plainTextPath = utilities.getPlainTextPath(backupPath);\n                this.disposable = inkdrop.main.dataStore.getLocalDB();\n                await utilities.getDataAndWriteAllNotes(\n                    this.disposable,\n                    plainTextPath\n                );\n                await utilities.writeMaps(plainTextPath, utilities.dataMap);\n\n                inkdrop.components.registerClass(ImportSidebar);\n                inkdrop.layouts.insertComponentToLayoutAfter(\n                    ImportSidebar.layoutName,\n                    \"SideBarMenuItemTrash\",\n                    ImportSidebar.name\n                );\n\n                inkdrop.components.registerClass(ImportModal);\n                inkdrop.layouts.addComponentToLayout(\n                    ImportModal.layoutName,\n                    ImportModal.name\n                );\n\n                // Sync stuff on changes:\n                this.disposable.onChange(async (change) => {\n                    try {\n                        const typeOfChange = change.id.split(\":\")[0];\n\n                        switch (typeOfChange) {\n                            case \"note\":\n                                const bookPath = `${plainTextPath}/${\n                                    utilities.dataMap.books[change.doc.bookId]\n                                }`;\n                                if (!utilities.dataMap.notes[change.id]) {\n                                    utilities.dataMap.notes[change.id] = {};\n                                }\n                                // If the title has changed, rename the old note.\n                                if (\n                                    change?.doc?.title &&\n                                    utilities.dataMap.notes[change.id]?.title &&\n                                    change.doc.title !==\n                                        utilities.dataMap.notes[change.id].title\n                                ) {\n                                    const oldDataMap = await utilities.getDataMap(\n                                        plainTextPath\n                                    );\n\n                                    await fs.rename(\n                                        `${bookPath}/${\n                                            oldDataMap.notes[change.id].title\n                                        }.md`,\n                                        `${bookPath}/${change.doc.title}.md`\n                                    );\n                                }\n\n                                utilities.dataMap.notes[change.id].title =\n                                    change.doc.title;\n                                utilities.dataMap.notes[\n                                    change.id\n                                ].path = `${bookPath}/${change.doc.title}.md`;\n\n                                await utilities.writeNote(\n                                    utilities.dataMap.notes[change.id].path,\n                                    change.doc.body\n                                );\n                                await utilities.writeMaps(\n                                    plainTextPath,\n                                    utilities.dataMap\n                                );\n\n                                break;\n                            case \"book\":\n                                if (\n                                    change?.doc?.name &&\n                                    change.doc.name !==\n                                        utilities.dataMap.books[change.id]\n                                ) {\n                                    const oldDataMap = await utilities.getDataMap(\n                                        plainTextPath\n                                    );\n\n                                    await fs.rename(\n                                        `${plainTextPath}/${\n                                            oldDataMap.books[change.id]\n                                        }`,\n                                        `${plainTextPath}/${change.doc.name}`\n                                    );\n\n                                    utilities.dataMap.books[change.id] =\n                                        change.doc.name;\n\n                                    await utilities.writeMaps(\n                                        plainTextPath,\n                                        utilities.dataMap\n                                    );\n                                }\n                                break;\n                        }\n                    } catch (err) {\n                        console.warn(\n                            \"Plain text backup may have had an issue:\",\n                            err\n                        );\n                    }\n                });\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (this.disposable) {\n                this.disposable.dispose();\n            }\n\n            inkdrop.components.deleteClass(ImportSidebar);\n            inkdrop.layouts.removeComponentFromLayout(\n                ImportSidebar.layoutName,\n                ImportSidebar.name\n            );\n\n            inkdrop.components.deleteClass(ImportModal);\n            layouts.removeComponentFromLayout(\"modal\", ImportModal.name);\n        }\n    },\n};\n"],"file":"index.js"}