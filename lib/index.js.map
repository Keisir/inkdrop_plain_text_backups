{"version":3,"sources":["../src/index.js"],"names":["module","exports","disposable","activate","inkdrop","isMobile","backupPath","config","get","core","db","main","dataStore","getLocalDB","onChange","change","typeOfChange","id","split","books","doc","bookId","then","bookData","bookPath","name","fs","mkdir","recursive","err","writeFile","title","body","console","log","warn","deactivate","dispose"],"mappings":";;AAAA;;;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,UAAU,EAAE,IADC;;AAEbC,EAAAA,QAAQ,GAAG;AACP,QAAIC,OAAO,IAAI,CAACA,OAAO,CAACC,QAAxB,EAAkC;AAC9B,YAAMC,UAAU,GAAGF,OAAO,CAACG,MAAR,CAAeC,GAAf,GAAqBC,IAArB,CAA0BC,EAA1B,CAA6BJ,UAAhD;;AACA,UAAIA,UAAJ,EAAgB;AACZ,aAAKJ,UAAL,GAAkBE,OAAO,CAACO,IAAR,CAAaC,SAAb,CAAuBC,UAAvB,EAAlB;AAEA,aAAKX,UAAL,CAAgBY,QAAhB,CAA0BC,MAAD,IAAY;AACjC,cAAI;AACA,kBAAMC,YAAY,GAAGD,MAAM,CAACE,EAAP,CAAUC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAArB;;AAEA,oBAAQF,YAAR;AACI,mBAAK,MAAL;AACI,qBAAKd,UAAL,CAAgBiB,KAAhB,CACKX,GADL,CACSO,MAAM,CAACK,GAAP,CAAWC,MADpB,EAEKC,IAFL,CAEWC,QAAD,IAAc;AAChB,wBAAMC,QAAQ,GAAI,GAAElB,UAAW,eAAciB,QAAQ,CAACE,IAAK,EAA3D;AACAC,kBAAAA,EAAE,CAACC,KAAH,CACIH,QADJ,EAEI;AAAEI,oBAAAA,SAAS,EAAE;AAAb,mBAFJ,EAGKC,GAAD,IAAS;AACL,wBAAIA,GAAJ,EAAS;AACL,4BAAMA,GAAN;AACH;;AACDH,oBAAAA,EAAE,CAACI,SAAH,CACK,GAAEN,QAAS,IAAGT,MAAM,CAACK,GAAP,CAAWW,KAAM,KADpC,EAEIhB,MAAM,CAACK,GAAP,CAAWY,IAFf,EAGKH,GAAD,IAAS;AACL,0BAAIA,GAAJ,EAAS;AACL,+BAAOI,OAAO,CAACC,GAAR,CACHL,GADG,CAAP;AAGH;AACJ,qBATL;AAWH,mBAlBL;AAoBH,iBAxBL;AAyBA;AACJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAvCJ;AAyCH,WA5CD,CA4CE,OAAOA,GAAP,EAAY;AACVI,YAAAA,OAAO,CAACE,IAAR,CAAa,2BAAb,EAA0CN,GAA1C;AACH;AACJ,SAhDD;AAiDH;AACJ;AACJ,GA3DY;;AA6DbO,EAAAA,UAAU,GAAG;AACT,QAAIhC,OAAO,IAAI,CAACA,OAAO,CAACC,QAAxB,EAAkC;AAC9B,UAAI,KAAKH,UAAT,EAAqB;AACjB,aAAKA,UAAL,CAAgBmC,OAAhB;AACH;AACJ;AACJ;;AAnEY,CAAjB","sourcesContent":["import * as fs from \"fs\";\n\nmodule.exports = {\n    disposable: null,\n    activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = inkdrop.config.get().core.db.backupPath;\n            if (backupPath) {\n                this.disposable = inkdrop.main.dataStore.getLocalDB();\n\n                this.disposable.onChange((change) => {\n                    try {\n                        const typeOfChange = change.id.split(\":\")[0];\n\n                        switch (typeOfChange) {\n                            case \"note\":\n                                this.disposable.books\n                                    .get(change.doc.bookId)\n                                    .then((bookData) => {\n                                        const bookPath = `${backupPath}/PLAIN_TEXT/${bookData.name}`;\n                                        fs.mkdir(\n                                            bookPath,\n                                            { recursive: true },\n                                            (err) => {\n                                                if (err) {\n                                                    throw err;\n                                                }\n                                                fs.writeFile(\n                                                    `${bookPath}/${change.doc.title}.md`,\n                                                    change.doc.body,\n                                                    (err) => {\n                                                        if (err) {\n                                                            return console.log(\n                                                                err\n                                                            );\n                                                        }\n                                                    }\n                                                );\n                                            }\n                                        );\n                                    });\n                                break;\n                            // case \"book\":\n                            //     this.disposable.books\n                            //         .get(change.id)\n                            //         .then((bookData) => {\n                            //             debugger;\n\n                            //             // fs.rename(\"/tmp/hello\", \"/tmp/world\", (err) => {\n                            //             //     if (err) throw err;\n                            //             //     console.log(\"renamed complete\");\n                            //             // });\n                            //         });\n                            //     break;\n                        }\n                    } catch (err) {\n                        console.warn(\"Plain text backup failed:\", err);\n                    }\n                });\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (this.disposable) {\n                this.disposable.dispose();\n            }\n        }\n    },\n};\n"],"file":"index.js"}