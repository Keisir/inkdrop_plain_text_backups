{"version":3,"sources":["../src/utilities.js"],"names":["self","module","exports","dataMap","books","notes","tree","getBackupPath","inkdrop","config","get","core","db","backupPath","getPlainTextPath","getDataMapPath","plainTextPath","getNotePath","getDataMap","JSON","parse","fs","promises","readFile","writeNote","notePath","body","mkdir","path","dirname","recursive","writeFile","getBookPath","disposable","doc","bookPath","name","parentBookId","hasParent","parentBookData","Boolean","getDataAndWriteAllNotes","allNotes","all","Promise","resolve","reject","docs","map","_id","title","bookData","bookId","getTree","dirPath","arrayOfFiles","files","readdirSync","forEach","file","filePath","statSync","isDirectory","test","push","writeMaps","maps","dataMapPath","stringify","importAll","diskDataMap","main","dataStore","getLocalDB","Object","keys","noteId","fileTreeIndex","indexOf","splice","newBody","currentNote","put","_rev","updatedAt","Date","now","doctype","createdAt","err","console","warn","log","newNotePath","dispose"],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    dataMap: { books: {}, notes: {}, tree: [] },\n\n    getBackupPath() {\n        return inkdrop.config.get().core.db.backupPath;\n    },\n    getPlainTextPath(backupPath) {\n        return `${backupPath || self.getBackupPath()}/PLAIN_TEXT`;\n    },\n    getDataMapPath(plainTextPath) {\n        return `${\n            plainTextPath || self.getPlainTextPath()\n        }/.inkdrop_plain_text_backups/__DATA_MAP__.json`;\n    },\n    getNotePath() {},\n\n    async getDataMap(plainTextPath) {\n        return JSON.parse(\n            await fs.promises.readFile(\n                self.getDataMapPath(plainTextPath),\n                \"utf-8\"\n            )\n        );\n    },\n\n    async writeNote(notePath, body) {\n        await fs.promises.mkdir(path.dirname(notePath), { recursive: true });\n        await fs.promises.writeFile(notePath, body);\n    },\n    async getBookPath(disposable, doc) {\n        let bookPath = doc.name;\n        if (doc.parentBookId) {\n            let hasParent = true;\n            while (hasParent) {\n                var parentBookData = await disposable.books.get(\n                    parentBookData\n                        ? parentBookData.parentBookId\n                        : doc.parentBookId\n                );\n                bookPath = `${parentBookData.name}/${bookPath}`;\n                hasParent = Boolean(parentBookData.parentBookId);\n            }\n        }\n        return bookPath;\n    },\n    async getDataAndWriteAllNotes(disposable, plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await disposable.notes.all();\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    if (!self.dataMap.notes[doc._id]) {\n                        self.dataMap.notes[doc._id] = {};\n                    }\n                    self.dataMap.notes[doc._id].title = doc.title;\n\n                    const bookData = await disposable.books.get(doc.bookId);\n\n                    if (bookData) {\n                        let bookPath = await self.getBookPath(\n                            disposable,\n                            bookData\n                        );\n\n                        self.dataMap.books[doc.bookId] = bookPath;\n                        self.dataMap.notes[\n                            doc._id\n                        ].path = `${bookPath}/${doc.title}.md`;\n\n                        await self.writeNote(\n                            `${plainTextPath}/${\n                                self.dataMap.notes[doc._id].path\n                            }`,\n                            doc.body\n                        );\n                    }\n                })\n            );\n            if (self.dataMap) {\n                resolve(self.dataMap);\n            } else {\n                reject(self);\n            }\n        });\n    },\n    getTree: (dirPath, arrayOfFiles) => {\n        const files = fs.readdirSync(dirPath);\n\n        arrayOfFiles = arrayOfFiles || [];\n\n        files.forEach(function (file) {\n            const filePath = `${dirPath}/${file}`;\n            if (fs.statSync(filePath).isDirectory()) {\n                arrayOfFiles = self.getTree(filePath, arrayOfFiles);\n            } else if (/\\.md$/.test(file)) {\n                arrayOfFiles.push(filePath);\n            }\n        });\n\n        return arrayOfFiles;\n    },\n    async writeMaps(plainTextPath, maps) {\n        maps.tree = self.getTree(plainTextPath);\n        const dataMapPath = self.getDataMapPath(plainTextPath);\n        await fs.promises.mkdir(path.dirname(dataMapPath), { recursive: true });\n\n        await fs.promises.writeFile(dataMapPath, JSON.stringify(maps));\n    },\n\n    async importAll() {\n        const plainTextPath = self.getPlainTextPath();\n        const diskDataMap = await self.getDataMap(plainTextPath);\n        const db = inkdrop.main.dataStore.getLocalDB();\n\n        const tree = self.getTree(plainTextPath);\n\n        await Promise.all(\n            Object.keys(diskDataMap.notes).map(async (noteId) => {\n                const filePath = `${plainTextPath}/${diskDataMap.notes[noteId].path}`;\n                const fileTreeIndex = tree.indexOf(filePath);\n                if (fileTreeIndex > -1) {\n                    tree.splice(fileTreeIndex, 1);\n                }\n                const newBody = await fs.promises.readFile(filePath, \"utf-8\");\n\n                try {\n                    const currentNote = await db.notes.get(noteId);\n\n                    // Don't bother if there are no changes:\n                    if (currentNote.body !== newBody) {\n                        await db.notes.put({\n                            _id: noteId,\n                            _rev: currentNote._rev,\n                            updatedAt: Date.now(),\n                            bookId: currentNote.bookId,\n                            title: currentNote.title,\n                            doctype: currentNote.doctype,\n                            createdAt: currentNote.createdAt,\n                            body: newBody,\n                        });\n                    }\n                } catch (err) {\n                    console.warn(\n                        `${noteId} import from plain text failed!`,\n                        err\n                    );\n                }\n            })\n        );\n        console.log(tree);\n\n        await Promise.all(tree.map(async (newNotePath) => {}));\n\n        db.dispose();\n    },\n});\n"],"file":"utilities.js"}