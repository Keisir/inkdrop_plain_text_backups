{"version":3,"sources":["../src/utilities.js"],"names":["self","module","exports","dataMap","books","notes","getBackupPath","inkdrop","config","get","core","db","backupPath","getPlainTextPath","getDataMapPath","plainTextPath","getNotePath","getDataMap","JSON","parse","fs","readFile","writeNote","notePath","body","mkdir","path","dirname","recursive","writeFile","getDataAndWriteAllNotes","disposable","allNotes","all","Promise","resolve","reject","docs","map","doc","_id","title","bookId","createdAt","bookData","name","writeMaps","maps","stringify","restoreAll","diskDataMap","main","dataStore","getLocalDB","Object","keys","noteId","newBody","currentNote","put","_rev","updatedAt","Date","now","doctype","err","console","warn","dispose"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    dataMap: { books: {}, notes: {} },\n\n    getBackupPath() {\n        return inkdrop.config.get().core.db.backupPath;\n    },\n    getPlainTextPath(backupPath) {\n        return `${backupPath || self.getBackupPath()}/PLAIN_TEXT`;\n    },\n    getDataMapPath(plainTextPath) {\n        return `${plainTextPath || self.getPlainTextPath()}/.__DATA_MAP__.json`;\n    },\n    getNotePath() {},\n\n    async getDataMap(plainTextPath) {\n        return JSON.parse(\n            await fs.readFile(self.getDataMapPath(plainTextPath), \"utf8\")\n        );\n    },\n\n    async writeNote(notePath, body) {\n        await fs.mkdir(path.dirname(notePath), { recursive: true });\n        await fs.writeFile(notePath, body);\n    },\n    async getDataAndWriteAllNotes(disposable, plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await disposable.notes.all();\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    if (!self.dataMap.notes[doc._id]) {\n                        self.dataMap.notes[doc._id] = {};\n                    }\n                    self.dataMap.notes[doc._id].title = doc.title;\n                    self.dataMap.notes[doc._id].bookId = doc.bookId;\n                    self.dataMap.notes[doc._id].createdAt = doc.createdAt;\n\n                    const bookData = await disposable.books.get(doc.bookId);\n                    if (bookData && bookData?.name) {\n                        self.dataMap.books[doc.bookId] = bookData.name;\n                        self.dataMap.notes[\n                            doc._id\n                        ].path = `${plainTextPath}/${bookData.name}/${doc.title}.md`;\n\n                        await self.writeNote(\n                            self.dataMap.notes[doc._id].path,\n                            doc.body\n                        );\n                    }\n                })\n            );\n\n            resolve(self.dataMap);\n        });\n    },\n    async writeMaps(plainTextPath, maps) {\n        await fs.mkdir(plainTextPath, { recursive: true });\n\n        await fs.writeFile(\n            self.getDataMapPath(plainTextPath),\n            JSON.stringify(maps)\n        );\n    },\n\n    async restoreAll() {\n        const plainTextPath = self.getPlainTextPath();\n        const diskDataMap = await self.getDataMap(plainTextPath);\n        const db = inkdrop.main.dataStore.getLocalDB();\n\n        await Promise.all(\n            await Object.keys(diskDataMap.notes).map(async (noteId) => {\n                const newBody = await fs.readFile(\n                    diskDataMap.notes[noteId].path,\n                    \"utf8\"\n                );\n                try {\n                    const currentNote = await db.notes.get(noteId);\n                    await db.notes.put({\n                        _id: noteId,\n                        _rev: currentNote._rev,\n                        updatedAt: Date.now(),\n                        bookId: diskDataMap.notes[noteId].bookId,\n                        title: diskDataMap.notes[noteId].title,\n                        doctype: \"markdown\",\n                        createdAt: diskDataMap.notes[noteId].createdAt,\n\n                        body: newBody,\n                    });\n                } catch (err) {\n                    console.warn(\n                        `${noteId} restore from plain text failed!`,\n                        err\n                    );\n                }\n            })\n        );\n\n        db.dispose();\n    },\n});\n"],"file":"utilities.js"}