{"version":3,"sources":["../src/utilities.js"],"names":["self","module","exports","dataMap","books","notes","getBackupPath","inkdrop","config","get","core","db","backupPath","getPlainTextPath","getDataMapPath","plainTextPath","getNotePath","getDataMap","JSON","parse","fs","readFile","writeNote","notePath","body","mkdir","path","dirname","recursive","writeFile","getDataAndWriteAllNotes","disposable","allNotes","all","Promise","resolve","reject","docs","map","doc","_id","title","bookData","bookId","name","writeMaps","maps","stringify","importAll","diskDataMap","main","dataStore","getLocalDB","Object","keys","noteId","newBody","currentNote","put","_rev","updatedAt","Date","now","doctype","createdAt","err","console","warn","dispose"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    dataMap: { books: {}, notes: {} },\n\n    getBackupPath() {\n        return inkdrop.config.get().core.db.backupPath;\n    },\n    getPlainTextPath(backupPath) {\n        return `${backupPath || self.getBackupPath()}/PLAIN_TEXT`;\n    },\n    getDataMapPath(plainTextPath) {\n        return `${plainTextPath || self.getPlainTextPath()}/._DATA_MAP_.json`;\n    },\n    getNotePath() {},\n\n    async getDataMap(plainTextPath) {\n        return JSON.parse(\n            await fs.readFile(self.getDataMapPath(plainTextPath), \"utf8\")\n        );\n    },\n\n    async writeNote(notePath, body) {\n        await fs.mkdir(path.dirname(notePath), { recursive: true });\n        await fs.writeFile(notePath, body);\n    },\n    async getDataAndWriteAllNotes(disposable, plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await disposable.notes.all();\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    if (!self.dataMap.notes[doc._id]) {\n                        self.dataMap.notes[doc._id] = {};\n                    }\n                    self.dataMap.notes[doc._id].title = doc.title;\n\n                    const bookData = await disposable.books.get(doc.bookId);\n                    if (bookData && bookData?.name) {\n                        self.dataMap.books[doc.bookId] = bookData.name;\n                        self.dataMap.notes[\n                            doc._id\n                        ].path = `${plainTextPath}/${bookData.name}/${doc.title}.md`;\n\n                        await self.writeNote(\n                            self.dataMap.notes[doc._id].path,\n                            doc.body\n                        );\n                    }\n                })\n            );\n\n            resolve(self.dataMap);\n        });\n    },\n    async writeMaps(plainTextPath, maps) {\n        await fs.mkdir(plainTextPath, { recursive: true });\n\n        await fs.writeFile(\n            self.getDataMapPath(plainTextPath),\n            JSON.stringify(maps)\n        );\n    },\n\n    async importAll() {\n        const plainTextPath = self.getPlainTextPath();\n        const diskDataMap = await self.getDataMap(plainTextPath);\n        const db = inkdrop.main.dataStore.getLocalDB();\n\n        await Promise.all(\n            await Object.keys(diskDataMap.notes).map(async (noteId) => {\n                const newBody = await fs.readFile(\n                    diskDataMap.notes[noteId].path,\n                    \"utf8\"\n                );\n\n                try {\n                    const currentNote = await db.notes.get(noteId);\n\n                    // Don't bother if there are no changes:\n                    if (currentNote.body !== newBody) {\n                        await db.notes.put({\n                            _id: noteId,\n                            _rev: currentNote._rev,\n                            updatedAt: Date.now(),\n                            bookId: currentNote.bookId,\n                            title: currentNote.title,\n                            doctype: currentNote.doctype,\n                            createdAt: currentNote.createdAt,\n\n                            body: newBody,\n                        });\n                    }\n                } catch (err) {\n                    console.warn(\n                        `${noteId} import from plain text failed!`,\n                        err\n                    );\n                }\n            })\n        );\n\n        db.dispose();\n    },\n});\n"],"file":"utilities.js"}