{"version":3,"sources":["../src/utilities.js"],"names":["self","module","exports","dataMap","books","notes","tree","localDb","getBackupPath","inkdrop","config","get","core","db","backupPath","getPlainTextPath","getDataMapPath","plainTextPath","getNotePath","getDataMap","JSON","parse","fs","promises","readFile","writeNote","notePath","body","mkdir","path","dirname","recursive","writeFile","getBookPath","doc","bookPath","name","parentBookId","hasParent","parentBookData","Boolean","getDataAndWriteAllNotes","allNotes","all","limit","Promise","resolve","reject","docs","map","_id","title","bookData","bookId","getTree","dirPath","arrayOfFiles","files","readdirSync","forEach","file","filePath","statSync","isDirectory","extname","push","writeMaps","maps","dataMapPath","stringify","importAll","diskDataMap","main","dataStore","getLocalDB","Object","keys","noteId","fileTreeIndex","indexOf","splice","newBody","currentNote","put","_rev","updatedAt","Date","now","doctype","createdAt","err","console","warn","prunedTree","filter","RegExp","test","newNotePath","bookPathArray","replace","split","bookDoc","findWithName","pop","newNoteId","createId","basename"],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    dataMap: { books: {}, notes: {}, tree: [] },\n    localDb: null,\n\n    getBackupPath() {\n        return inkdrop.config.get().core.db.backupPath;\n    },\n    getPlainTextPath(backupPath) {\n        return `${backupPath || self.getBackupPath()}/PLAIN_TEXT`;\n    },\n    getDataMapPath(plainTextPath) {\n        return `${\n            plainTextPath || self.getPlainTextPath()\n        }/.inkdrop_plain_text_backups/__DATA_MAP__.json`;\n    },\n    getNotePath() {},\n\n    async getDataMap(plainTextPath) {\n        return JSON.parse(\n            await fs.promises.readFile(\n                self.getDataMapPath(plainTextPath),\n                \"utf-8\"\n            )\n        );\n    },\n\n    async writeNote(notePath, body) {\n        await fs.promises.mkdir(path.dirname(notePath), { recursive: true });\n        await fs.promises.writeFile(notePath, body);\n    },\n    async getBookPath(localDb, doc) {\n        let bookPath = doc.name;\n        if (doc.parentBookId) {\n            let hasParent = true;\n            while (hasParent) {\n                var parentBookData = await localDb.books.get(\n                    parentBookData\n                        ? parentBookData.parentBookId\n                        : doc.parentBookId\n                );\n                bookPath = `${parentBookData.name}/${bookPath}`;\n                hasParent = Boolean(parentBookData.parentBookId);\n            }\n        }\n        return bookPath;\n    },\n    async getDataAndWriteAllNotes(localDb, plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await localDb.notes.all({ limit: 999999 });\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    if (!self.dataMap.notes[doc._id]) {\n                        self.dataMap.notes[doc._id] = {};\n                    }\n                    self.dataMap.notes[doc._id].title = doc.title;\n\n                    const bookData = await localDb.books.get(doc.bookId);\n\n                    if (bookData) {\n                        let bookPath = await self.getBookPath(\n                            localDb,\n                            bookData\n                        );\n\n                        self.dataMap.books[doc.bookId] = bookPath;\n                        self.dataMap.notes[\n                            doc._id\n                        ].path = `${bookPath}/${doc.title}.md`;\n\n                        await self.writeNote(\n                            `${plainTextPath}/${\n                                self.dataMap.notes[doc._id].path\n                            }`,\n                            doc.body\n                        );\n                    }\n                })\n            );\n            if (self.dataMap) {\n                resolve(self.dataMap);\n            } else {\n                reject(self);\n            }\n        });\n    },\n    getTree: (dirPath, arrayOfFiles) => {\n        const files = fs.readdirSync(dirPath);\n\n        arrayOfFiles = arrayOfFiles || [];\n\n        files.forEach(function (file) {\n            const filePath = `${dirPath}/${file}`;\n            if (fs.statSync(filePath).isDirectory()) {\n                arrayOfFiles = self.getTree(filePath, arrayOfFiles);\n            } else if (path.extname(file) === \".md\") {\n                arrayOfFiles.push(filePath);\n            }\n        });\n\n        return arrayOfFiles;\n    },\n    async writeMaps(plainTextPath, maps) {\n        maps.tree = self.getTree(plainTextPath);\n        const dataMapPath = self.getDataMapPath(plainTextPath);\n        await fs.promises.mkdir(path.dirname(dataMapPath), { recursive: true });\n\n        await fs.promises.writeFile(dataMapPath, JSON.stringify(maps));\n    },\n\n    async importAll() {\n        const plainTextPath = self.getPlainTextPath();\n        const diskDataMap = await self.getDataMap(plainTextPath);\n        self.localDb = self.localDb || inkdrop.main.dataStore.getLocalDB();\n\n        const tree = self.getTree(plainTextPath);\n\n        await Promise.all(\n            Object.keys(diskDataMap.notes).map(async (noteId) => {\n                const filePath = `${plainTextPath}/${diskDataMap.notes[noteId].path}`;\n                const fileTreeIndex = tree.indexOf(filePath);\n                if (fileTreeIndex > -1) {\n                    tree.splice(fileTreeIndex, 1);\n                }\n                const newBody = await fs.promises.readFile(filePath, \"utf-8\");\n\n                try {\n                    const currentNote = await self.localDb.notes.get(noteId);\n\n                    // Don't bother if there are no changes:\n                    if (currentNote.body !== newBody) {\n                        await self.localDb.notes.put({\n                            _id: noteId,\n                            _rev: currentNote._rev,\n                            updatedAt: Date.now(),\n                            bookId: currentNote.bookId,\n                            title: currentNote.title,\n                            doctype: currentNote.doctype,\n                            createdAt: currentNote.createdAt,\n                            body: newBody,\n                        });\n                    }\n                } catch (err) {\n                    console.warn(\n                        `${noteId} import from plain text failed!`,\n                        err\n                    );\n                }\n            })\n        );\n\n        // Remove 'Trash' files from the tree:\n        const prunedTree = tree.filter((filePath) => {\n            return !new RegExp(`${plainTextPath}/undefined/`).test(filePath);\n        });\n\n        await Promise.all(\n            prunedTree.map(async (newNotePath) => {\n                const bookPathArray = path\n                    .dirname(newNotePath)\n                    .replace(new RegExp(`^${plainTextPath}/`), \"\")\n                    .split(\"/\");\n                // This is a best guess because it uses the name,\n                // if there is another notebook with the same\n                // exact name this may return the\n                // 'wrong' one.\n                const bookDoc = await self.localDb.books.findWithName(\n                    bookPathArray.pop()\n                );\n                if (bookDoc && bookDoc._id) {\n                    const newBody = await fs.promises.readFile(\n                        newNotePath,\n                        \"utf-8\"\n                    );\n\n                    const newNoteId = self.localDb.notes.createId();\n                    await self.localDb.notes.put({\n                        _id: newNoteId,\n                        updatedAt: Date.now(),\n                        bookId: bookDoc._id,\n                        title: path\n                            .basename(newNotePath)\n                            .replace(\n                                new RegExp(`${path.extname(newNotePath)}$`),\n                                \"\"\n                            ),\n                        doctype: \"markdown\",\n                        createdAt: Date.now(),\n                        body: newBody,\n                    });\n                }\n            })\n        );\n\n        await self.writeMaps(plainTextPath, self.dataMap);\n    },\n});\n"],"file":"utilities.js"}