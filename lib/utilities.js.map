{"version":3,"sources":["../src/utilities.js"],"names":["self","module","exports","dataMap","books","notes","getBackupPath","inkdrop","config","get","core","db","backupPath","getPlainTextPath","getDataMapPath","plainTextPath","getNotePath","getDataMap","JSON","parse","fs","readFile","writeNote","notePath","body","mkdir","path","dirname","recursive","writeFile","getDataAndWriteAllNotes","disposable","allNotes","all","Promise","resolve","reject","docs","map","doc","_id","title","bookData","bookId","bookPath","name","parentBookId","hasParent","parentBookData","Boolean","writeMaps","maps","dataMapPath","stringify","importAll","diskDataMap","main","dataStore","getLocalDB","Object","keys","noteId","newBody","currentNote","put","_rev","updatedAt","Date","now","doctype","createdAt","err","console","warn","dispose"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    dataMap: { books: {}, notes: {} },\n\n    getBackupPath() {\n        return inkdrop.config.get().core.db.backupPath;\n    },\n    getPlainTextPath(backupPath) {\n        return `${backupPath || self.getBackupPath()}/PLAIN_TEXT`;\n    },\n    getDataMapPath(plainTextPath) {\n        return `${\n            plainTextPath || self.getPlainTextPath()\n        }/.inkdrop_plain_text_backups/__DATA_MAP__.json`;\n    },\n    getNotePath() {},\n\n    async getDataMap(plainTextPath) {\n        return JSON.parse(\n            await fs.readFile(self.getDataMapPath(plainTextPath), \"utf8\")\n        );\n    },\n\n    async writeNote(notePath, body) {\n        await fs.mkdir(path.dirname(notePath), { recursive: true });\n        await fs.writeFile(notePath, body);\n    },\n    async getDataAndWriteAllNotes(disposable, plainTextPath) {\n        // Sync everything one time:\n        const allNotes = await disposable.notes.all();\n\n        return new Promise(async (resolve, reject) => {\n            await Promise.all(\n                await allNotes.docs.map(async (doc) => {\n                    if (!self.dataMap.notes[doc._id]) {\n                        self.dataMap.notes[doc._id] = {};\n                    }\n                    self.dataMap.notes[doc._id].title = doc.title;\n\n                    const bookData = await disposable.books.get(doc.bookId);\n\n                    if (bookData) {\n                        let bookPath = bookData.name;\n                        if (bookData.parentBookId) {\n                            let hasParent = true;\n                            while (hasParent) {\n                                var parentBookData = await disposable.books.get(\n                                    parentBookData\n                                        ? parentBookData.parentBookId\n                                        : bookData.parentBookId\n                                );\n                                bookPath = `${parentBookData.name}/${bookPath}`;\n                                hasParent = Boolean(\n                                    parentBookData.parentBookId\n                                );\n                            }\n                        }\n\n                        self.dataMap.books[doc.bookId] = bookData.name;\n                        self.dataMap.notes[\n                            doc._id\n                        ].path = `${bookPath}/${doc.title}.md`;\n\n                        await self.writeNote(\n                            `${plainTextPath}/${\n                                self.dataMap.notes[doc._id].path\n                            }`,\n                            doc.body\n                        );\n                    }\n                })\n            );\n\n            resolve(self.dataMap);\n        });\n    },\n    async writeMaps(plainTextPath, maps) {\n        const dataMapPath = self.getDataMapPath(plainTextPath);\n        await fs.mkdir(path.dirname(dataMapPath), { recursive: true });\n\n        await fs.writeFile(dataMapPath, JSON.stringify(maps));\n    },\n\n    async importAll() {\n        const plainTextPath = self.getPlainTextPath();\n        const diskDataMap = await self.getDataMap(plainTextPath);\n        const db = inkdrop.main.dataStore.getLocalDB();\n\n        await Promise.all(\n            await Object.keys(diskDataMap.notes).map(async (noteId) => {\n                const newBody = await fs.readFile(\n                    `${plainTextPath}/${diskDataMap.notes[noteId].path}`,\n                    \"utf8\"\n                );\n\n                try {\n                    const currentNote = await db.notes.get(noteId);\n\n                    // Don't bother if there are no changes:\n                    if (currentNote.body !== newBody) {\n                        await db.notes.put({\n                            _id: noteId,\n                            _rev: currentNote._rev,\n                            updatedAt: Date.now(),\n                            bookId: currentNote.bookId,\n                            title: currentNote.title,\n                            doctype: currentNote.doctype,\n                            createdAt: currentNote.createdAt,\n\n                            body: newBody,\n                        });\n                    }\n                } catch (err) {\n                    console.warn(\n                        `${noteId} import from plain text failed!`,\n                        err\n                    );\n                }\n            })\n        );\n\n        db.dispose();\n    },\n});\n"],"file":"utilities.js"}